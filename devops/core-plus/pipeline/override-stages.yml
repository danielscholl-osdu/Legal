.set_image_name:
  script:
    - >
      if echo $CI_COMMIT_REF_NAME | grep -Eq "^release\/[0-9]{1,2}.[0-9]{1,2}$";
      then
        export IMAGE_NAME=$IMAGE_NAME-release;
        export IMAGE_BOOTSTRAP_NAME=$IMAGE_BOOTSTRAP_NAME-release;
        export GC_LEGALSTATUS_IMAGE_NAME=$GC_LEGALSTATUS_IMAGE_NAME-release;
      fi
    - >
      if [[ "$CI_COMMIT_REF_NAME" == "$CI_DEFAULT_BRANCH" ]];
      then
        export IMAGE_NAME=$IMAGE_NAME-master;
        export IMAGE_BOOTSTRAP_NAME=$IMAGE_BOOTSTRAP_NAME-master;
        export GC_LEGALSTATUS_IMAGE_NAME=$GC_LEGALSTATUS_IMAGE_NAME-master;
      fi
    - >
      if [[ "$CI_COMMIT_TAG" != "" ]];
      then
        IMAGE_TAG="$CI_COMMIT_TAG";
        EXTRA_TAG="-t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_TAG";
        EXTRA_BOOTSTRAP_TAG="-t $CI_REGISTRY_IMAGE/$IMAGE_BOOTSTRAP_NAME:$CI_COMMIT_TAG";
      elif [[ "$CI_COMMIT_REF_NAME" == "$CI_DEFAULT_BRANCH" ]];
      then
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA";
        HELM_TAG="latest"
        EXTRA_TAG="-t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest";
        EXTRA_BOOTSTRAP_TAG="-t $CI_REGISTRY_IMAGE/$IMAGE_BOOTSTRAP_NAME:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE/$IMAGE_BOOTSTRAP_NAME:latest";
      else
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA";
        HELM_TAG="gc$CI_COMMIT_SHORT_SHA"
        EXTRA_TAG="-t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA";
        EXTRA_BOOTSTRAP_TAG="-t $CI_REGISTRY_IMAGE/$IMAGE_BOOTSTRAP_NAME:$CI_COMMIT_SHORT_SHA";
      fi

.substitute_image_in_helm:
  script:
    - wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
    - IMAGE="$CI_REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG" yq -i '.data.image = env(IMAGE)' $GC_HELM_DEPLOYMENT_DIR/values.yaml
    - yq -e '.data | has("bootstrapImage")' $GC_HELM_DEPLOYMENT_DIR/values.yaml &>/dev/null && BOOTSTRAP_IMAGE="$CI_REGISTRY_IMAGE/$IMAGE_BOOTSTRAP_NAME:$IMAGE_TAG" yq -i '.data.bootstrapImage = env(BOOTSTRAP_IMAGE)' $GC_HELM_DEPLOYMENT_DIR/values.yaml
    - LEGALSTATUS_UPDATE_IMAGE="$CI_REGISTRY_IMAGE/$GC_LEGALSTATUS_IMAGE_NAME:$IMAGE_TAG" yq -i '.data.legalStatusUpdateImage = env(LEGALSTATUS_UPDATE_IMAGE)' $GC_HELM_DEPLOYMENT_DIR/values.yaml
    - cat $GC_HELM_DEPLOYMENT_DIR/values.yaml | grep -i image

gc-containerize-gitlab:core-plus:
  stage: containerize
  needs:
    - "compile-and-unit-test"
    - "download_plugins"
  tags: ["osdu-small"]
  image: docker:19.03
  cache: {}
  variables:
    BUILD_ARGS: "--build-arg PORT=$GC_PORT"
    BUILD_PATH: "provider/legal-core-plus/cloudbuild/Dockerfile"
    IMAGE_NAME: "legal-core-plus"
  script:
    - !reference [.set_image_name, script]
    - docker build $EXTRA_TAG -f $BUILD_PATH $BUILD_ARGS .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: "$PROTECTED == '1'"
      when: on_success

gc-helm-charts-gitlab:core-plus:
  stage: containerize
  tags: ["osdu-small"]
  needs: ["gc-containerize-gitlab:core-plus"]
  image:
    name: alpine/helm:3.11.2
    entrypoint: [""]
  variables:
    IMAGE_NAME: "legal-core-plus"
  before_script:
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - !reference [.set_image_name, script]
    - !reference [.substitute_image_in_helm, script]
  script:
    - !reference [.gc_define_app_version, script]
    - helm package $GC_HELM_DEPLOYMENT_DIR -u --version $GC_HELM_PACKAGE_VERSION-$HELM_TAG --app-version $APP_VERSION
    - helm push $GC_HELM_PACKAGE_NAME-$GC_HELM_PACKAGE_VERSION-$HELM_TAG.tgz oci://$CI_REGISTRY_IMAGE/core-plus-helm
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: "$PROTECTED == '1'"
      when: on_success

gc-baremetal-deploy:
  environment:
    name: Google_Cloud
  extends: .gc-baremetal-variables
  tags: ["osdu-small"]
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  stage: deploy
  needs:
    - "gc-containerize-gitlab:core-plus"
    - "gc-helm-charts-gitlab:core-plus"
  retry: 1
  variables:
    IMAGE_NAME: "legal-core-plus"
  script:
    - gcloud auth activate-service-account --key-file $GC_BAREMETAL_DEPLOY_FILE
    - !reference [.set_image_name, script]
    - !reference [.gc_common_config, script]
    - >
      helm upgrade $GC_SERVICE-deploy oci://$CI_REGISTRY_IMAGE/core-plus-helm/$GC_HELM_PACKAGE_NAME
      --version $GC_HELM_PACKAGE_VERSION-$HELM_TAG
      --install
      --create-namespace
      --namespace=$GC_HELM_NAMESPACE
      --wait
      --history-max=3
      --set global.onPremEnabled=true
      --set global.domain=$GC_DOMAIN
      --set global.dataPartitionId=$GC_TENANT
      --set data.serviceAccountName=$GC_SERVICE
      --set data.bootstrapServiceAccountName=$GC_BOOTSTRAP_SA
      --set data.logLevel=INFO
      --set data.springProfilesActive=$GC_SPRING_PROFILES_ACTIVE
    - !reference [.gc_verify_deploy, script]
    - !reference [.gc_verify_bootstrap, script]
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: "$PROTECTED == '1'"
      when: on_success

gc-baremetal-test:
  variables:
    GC_VENDOR: baremetal
